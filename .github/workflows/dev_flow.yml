name: Dev CI-CD Pipeline

on:
  push:
    branches:
      - release/dev
  pull_request:
    branches:
      - release/dev

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    services:
      maindb:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
          POSTGRES_DB: ${{ secrets.TEST_DB }}
        ports:
          - 5432:5432
        # 서비스 컨테이너가 준비될 때까지 기다리는 옵션 설정
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:6.2.6
        ports: 
          - 6379:6379


    steps:

      - name: checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Create .env file
        run: |
          echo "BISKIT_USER=${{ secrets.BISKIT_USER }}" >> .env
          echo "BISKIT_USER_PW=${{ secrets.BISKIT_USER_PW }}" >> .env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "TEST_DB=${{ secrets.TEST_DB }}" >> .env
          echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env
          echo "CORS_ORIGINS=${{ secrets.CORS_ORIGINS }}" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "ALGORITHM=${{ secrets.ALGORITHM }}" >> .env
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}" >> .env
          echo "PROJECT_NAME=${{ secrets.PROJECT_NAME }}" >> .env
          echo "NICKNAME_API=${{ secrets.NICKNAME_API }}" >> .env
          echo "REFRESH_SECRET_KEY=${{ secrets.REFRESH_SECRET_KEY }}" >> .env
          echo "REFRESH_TOKEN_EXPIRE_MINUTES=${{ secrets.REFRESH_TOKEN_EXPIRE_MINUTES }}" >> .env
          echo "SMTP_SERVER=${{ secrets.SMTP_SERVER }}" >> .env
          echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
          echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> .env
          echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env
          echo "DOCS_USER=${{ secrets.DOCS_USER }}" >> .env
          echo "DOCS_PW=${{ secrets.DOCS_PW }}" >> .env
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env
          echo "BUCKET_NAME=${{ secrets.BUCKET_NAME }}" >> .env
          echo "LOGO_URL=${{ secrets.LOGO_URL }}" >> .env
          echo "FIRESTORE_URL=${{ secrets.FIRESTORE_URL }}" >> .env
          echo "S3_URL=${{ secrets.S3_URL }}" >> .env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
          echo "ENCODED_KEY=${{ secrets.ENCODED_KEY }}" >> .env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env
          echo "DEBUG=True" >> .env

      - name: Prepare log directory and file
        run: |
          mkdir -p apps/logging
          touch apps/logging/uvicorn_log

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/requirements.txt

      - name: set python path
        run: |
          echo "PYTHONPATH=${{ github.workspace }}/apps" >> $GITHUB_ENV

      - name: Run test
        run: |
          pytest --rootdir=apps/

  push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Set DATE variable
        run: echo "DATE=$(date +'%Y%m%d-%H%M')" >> $GITHUB_ENV

      - name: checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/biskit:${{ env.DATE }}

  deploy:
    needs: push
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Remote ssh connect
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.DEV_REMOTE_IP }}
          username: ${{ secrets.DEV_REMOTE_USER }}
          password: ${{ secrets.DEV_REMOTE_PASSWORD }}
          port: ${{ secrets.DEV_REMOTE_PORT }}
          script: |
            cd BISKIT-Backend
            git checkout ${{ secrets.DEV_BRANCH }}
            git pull origin ${{ secrets.DEV_BRANCH }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/biskit:latest
            docker compose -f docker-compose.deploy.yml up -d
